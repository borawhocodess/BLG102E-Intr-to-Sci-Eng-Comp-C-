////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// WEEK 01
#include <stdio.h>

int main()
{
	printf("Hello, my dear world!\n");
    
	return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// WEEK 02
// in class solution
#include <stdio.h>

int main()
{		
	int fah, cel;

	printf("Enter degree in F: ");
	scanf("%d", &fah);

	cel = (5.0 / 9.0) * (fah -32);

	printf("The converted degre is in C: %d \n", cel);

	return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// tempconv.c: alternative solution
#include <stdio.h>   // printf, scanf
#include <stdlib.h>  // EXIT_SUCCESS

int main()
{
    double fahrenheit = 0.0;
    printf("Enter temperature (in F): ");
    scanf("%lf", &fahrenheit);

    double celcius = (5.0 / 9.0) * (fahrenheit - 32);
    printf("Temperature (in C): %.2f\n", celcius);
    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// class
#include <stdio.h>
#include <math.h>

int main()
{
	float height, weight, bsa;

	printf("Enter height and weight: ");
	scanf("%f %f", &height, &weight);


	bsa = 0.0003207 * pow(height, 0.3) * pow(weight, 0.7285 - (0.0188 * log10(weight)));

	printf("Body surface area is: %f \n", bsa);
	
	return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// bsa.c
#include <stdio.h>   // printf, scanf
#include <stdlib.h>  // EXIT_SUCCESS
#include <math.h>    // pow, log10

int main()
{
    double height = 0.0;
    printf("Height [cm]: ");
    scanf("%lf", &height);

    double weight = 0.0;
    printf("Weight [g]: ");
    scanf("%lf", &weight);

    double bsa = 0.0003207 * pow(height, 0.3)
                           * pow(weight, 0.7285 - 0.0188 * log10(weight));
    printf("Body surface area [m^2] = %.2f\n", bsa);

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// class 
#include <stdio.h>
#include <math.h>

int main()
{
	float a, b, c, delta, x1, x2;

	printf("Enter a, b, c: ");
	scanf("%f %f %f", &a, &b, &c);


	delta = (b * b) - (4 * a * c);
	x1 = ((-b) - sqrt(delta)) / (2 * a);
	x2 = ((-b) + sqrt(delta)) / (2 * a);

	printf("Roots x1 = %f and x2 = %f", x1, x2);
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// roots.c
/*
    This program calculates the roots of the polynomial:
    a x^2 + b x + c
 */

#include <stdio.h>   // printf, scanf
#include <stdlib.h>  // EXIT_SUCCESS
#include <math.h>    // sqrt

int main()
{
    double a = 0.0, b = 0.0, c = 0.0;
    printf("Enter coefficients: ");
    scanf("%lf %lf %lf", &a, &b, &c);

    double discriminant = b * b - 4 * a * c;
    double x1 = ((-b) + sqrt(discriminant)) / (2 * a);
    double x2 = ((-b) - sqrt(discriminant)) / (2 * a);
    printf("Roots: %f %f\n", x1, x2);

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// WEEK 03
// class
#include <stdio.h>
#include <stdlib.h>

int main()
{
    float temperature;
    char c;

    printf("Enter temperature (end with F for Fahrenheit or C for Celsius): ");
    scanf("%f %c", &temperature, &c);

    if (c == 'C' || c == 'c') {
        if (temperature <= 0)
            printf("Water is Solid (Ice) at %.2f degrees Celsius\n", temperature);
        else if (temperature > 100)
            printf("Water is Gas (Vapor) at %.2f degrees Celsius\n", temperature);
        else
            printf("Water is Liquid at %.2f degrees Celsius\n", temperature);
    } else if ((c == 'F') || (c == 'f')) {
        if (temperature <= 32)
            printf("Water is Solid (Ice) at %.2f degrees Fahrenheit\n", temperature);
        else if (temperature > 212)
            printf("Water is Gas (Vapor) in %.2f degrees Fahrenheit\n", temperature);
        else if (temperature > 32 && temperature < 212)
            printf("Water is Liquid in %.2f degrees Fahrenheit\n", temperature);
    } else {
        printf("Please enter temperature unit as either C or F.\n");
        return 1;
    }

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// water1.c
#include <stdio.h> // printf, scanf
#include <stdlib.h> // EXIT_SUCCESS, EXIT_FAILURE

int main()
{
    double temperature;
    char unit;
    printf("Enter temperature (end with F for Fahrenheit or C for Celsius): ");
    scanf("%lf %c", &temperature, &unit);

    double celsius = 0.0;
    if (unit == 'C')  {
        celsius = temperature;
    } else if (unit == 'F') {
        celsius = (5.0 / 9.0) * (temperature - 32);
    } else {
        printf("Please enter temperature unit as either C or F.\n");
        return EXIT_FAILURE;
    }

    if (celsius <= 0) {
        printf("Water is Solid (Ice) at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    } else if (celsius >= 100) {
        printf("Water is Gas (Vapor) at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    } else {
        printf("Water is Liquid at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    }

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
///////////////////////////////////////////////
// class
#include <stdio.h>
#include <stdlib.h>

int main()
{
    float temperature, altitude, boiling_point, temp_fah;
    char c;
	
    printf("Enter temperature (end with F for Fahrenheit or C for Celsius): ");
    scanf("%f %c", &temperature, &c);
	
    printf("Enter altitude in meters: ");
    scanf("%f", &altitude);

    if (c != 'C' && c != 'F' && c != 'c' && c != 'f') {
	printf("Please enter temperature unit as either C or F.\n");
        return 1;
    }

    temp_fah = temperature;
    if (c == 'F' || c == 'f') {
	temperature = (5.0 / 9.0) * (temperature - 32);
    }
	
    boiling_point = 100 - (altitude / 300);
	
    if (temperature <= 0)
        printf("Water is Solid (Ice) at %.2f degrees %s\n", temperature == temp_fah ? temperature : temp_fah, c == 'C' ? "Celsius" : "Fahrenheit");
    else if (temperature > boiling_point)
        printf("Water is Gas (Vapor) at %.2f degrees %s\n", temperature == temp_fah ? temperature : temp_fah, c == 'C' ? "Celsius" : "Fahrenheit");
    else if (temperature > 0 || temperature < boiling_point)
        printf("Water is Liquid at %.2f degrees %s\n", temperature == temp_fah ? temperature : temp_fah, c == 'C' ? "Celsius" : "Fahrenheit");
	
    return EXIT_SUCCESS;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
///////////////////////////////////////////////
// water2.c
#include <stdio.h> // printf, scanf
#include <stdlib.h> // EXIT_SUCCESS

int main()
{
    double temperature;
    char unit;
    printf("Enter temperature (end with F for Fahrenheit or C for Celsius): ");
    scanf("%lf %c", &temperature, &unit);

    double altitude;
    printf("Enter altitude in meters: ");
    scanf("%lf", &altitude);

    double celsius = 0.0;
    if (unit == 'C') {
        celsius = temperature;
    } else if (unit == 'F') {
        celsius = (5.0 / 9.0) * (temperature - 32);
    } else {
        printf("Please enter temperature unit as either C or F.\n");
        return EXIT_FAILURE;
    }

    double boiling_point = 100 - (altitude / 300.0);
    if (celsius <= 0) {
        printf("Water is Solid (Ice) at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    } else if (celsius >= boiling_point) {
        printf("Water is Gas (Vapor) at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    } else {
        printf("Water is Liquid at %.2lf degrees %s\n", temperature,
               unit == 'C' ? "Celsius" : "Fahrenheit");
    }

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// WEEK 04
// class
#include <stdio.h>

#define EPSILON 0.00001

float func(float x)
{
	return x * x * x - x * x + 2;
}

float derivativeFunc(float x)
{
	return 3 * x * x - 2 * x;
}

void findRootsWithNewtonRaphson(float x)
{
	float h = func(x) / derivativeFunc(x);
	while (h >= EPSILON || h <= -EPSILON)
	{
		x = x - h;
		h = func(x) / derivativeFunc(x);
	}
	
	printf("The root is: %.2f \n", x);
}

int main()
{
	float initial_guess = -50;
	findRootsWithNewtonRaphson(initial_guess);
		
	return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// monte_hall_1.c
#include <stdio.h>    // printf, NULL
#include <stdlib.h>   // srand, rand, EXIT_SUCCESS
#include <stdbool.h>  // bool
#include <time.h>     // time

#define N_ITERATIONS 10000

int main()
{
    srand(time(NULL));

    int strategy_1 = 0;  // wins when not changing the door
    int strategy_2 = 0;  // wins when changing the door
    for (int i = 0; i < N_ITERATIONS; i++) {
        int car_door = rand() % 3 + 1;
        int selected_door = rand() % 3 + 1;

        int opened_door = 0;
        int unopened_door = 0;
        if (car_door != selected_door) {
            if ((car_door == 1) && (selected_door == 2)) {
                opened_door = 3;
                unopened_door = 1;
            } else if ((car_door == 1) && (selected_door == 3)) {
                opened_door = 2;
                unopened_door = 1;
            } else if ((car_door == 2) && (selected_door == 1)) {
                opened_door = 3;
                unopened_door = 2;
            } else if ((car_door == 2) && (selected_door == 3)) {
                opened_door = 1;
                unopened_door = 2;
            } else if ((car_door == 3) && (selected_door == 1)) {
                opened_door = 2;
                unopened_door = 3;
            } else if ((car_door == 3) && (selected_door == 2)) {
                opened_door = 1;
                unopened_door = 3;
            }
        } else {
            bool heads = rand() % 2 == 0;
            if (car_door == 1) {
                opened_door = heads ? 2 : 3;
                unopened_door = heads ? 3 : 2;
            } else if (car_door == 2) {
                opened_door = heads ? 1 : 3;
                unopened_door = heads ? 3 : 1;
            } else {
                opened_door = heads ? 1 : 2;
                unopened_door = heads ? 2 : 1;
            }
        }

        if (car_door == selected_door) {
            strategy_1++;  // we win if we don't change the door
        } else if (car_door == unopened_door) {
            strategy_2++;  // we win if we do change the door
        }
    }

    double win_ratio_1 = (double) strategy_1 / N_ITERATIONS;
    double win_ratio_2 = (double) strategy_2 / N_ITERATIONS;
    printf("win ratio for strategy 1: %.3lf\n", win_ratio_1);
    printf("win ratio for strategy 2: %.3lf\n", win_ratio_2);

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// class
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUMBER_OF_ITER 10000

int main()
{
	float changing_the_selection = 0.0;
	float not_changing_the_selection = 0.0;
	
	srand(time(NULL)); // randomize seed
	
	int selected_door, door_with_the_prize;
	
	for (int i = 0; i < NUMBER_OF_ITER; i++) 
	{
		door_with_the_prize = rand() % 3 + 1;
		selected_door = rand() % 3 + 1;
		
		if (selected_door == door_with_the_prize)
			not_changing_the_selection++;
		else if (selected_door != door_with_the_prize)
			changing_the_selection++;	
	}
	
	float ratio_for_changing = changing_the_selection / NUMBER_OF_ITER;
	float ratio_for_not_changing = not_changing_the_selection / NUMBER_OF_ITER;
	
	printf("Winning ratio for changing the selection: %f \n", ratio_for_changing);
	printf("Winning ratio for not changing the selection: %f \n", ratio_for_not_changing);
	
	return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
// newton_raphson.c
/*
	Newton Method
	
	gcc -std=c99 -Werror newton_method.c -lm -o newton_method
*/

#include <math.h> // fabs
#include <stdio.h> // printf
#include <stdlib.h> // EXIT_SUCCESS

#define EPSILON 0.001
#define ERROR_TOLERANCE 0.001

int main()
{
    double a = 1;
    double b = -2;
    double c = -15; // (x+3) (x-5) roots = -3,5

    double x = 1;
    double y1, y2;
    double m;
    while (fabs(a * x * x + b * x + c) >= ERROR_TOLERANCE) // we find the root when the error is smaller than Tolerance
    { 
	//To get derivative(slope) we find the line that passes from two point which are really close to x
        y1 = (a * (x - EPSILON) * (x - EPSILON) + b * (x - EPSILON) + c);
        y2 = (a * (x + EPSILON) * (x + EPSILON) + b * (x + EPSILON) + c);
        m = (y2 - y1) / (2 * EPSILON); //derivative(slope)
        
	if (!m)
            m += EPSILON; // if the derivative at x is 0 than we change it with a very small number

        /* * * * * * * * * 
	(y-y1)=m(x-x1) y=0
	-y1 = m(x-x1)
	x = (-y1/m)+x1
	* * * * * * * * * */

        x = (-y1 / m) + (x - EPSILON);
        printf("%lf\n", fabs(a * x * x + b * x + c));
    }

    printf("Root: %lf\n", x);

    return EXIT_SUCCESS;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
